<!doctype html>
<html lang="{{currentLang}}">
<head>
  <!-- Title -->
  <title>Enecuum | ENQ | Blockchain of tomorrow</title>

  <!-- Favicon -->
  <link rel="shortcut icon" href="/img/favicon.ico">

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    
  <!-- CSS Front Template -->
  <link rel="stylesheet" href="/css/theme.css">
  <link rel="stylesheet" href="/vendor/animate.css/animate.min.css">
  <link rel="stylesheet" href="/vendor/font-awesome/css/fontawesome-all.min.css">
  <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/enq.css">
  <link rel="stylesheet" href="/vendor/dzsparallaxer/dzsparallaxer.css">
  <link rel="stylesheet" href="/vendor/slick-carousel/slick/slick.css">
  <link rel="stylesheet" href="/vendor/fancybox/jquery.fancybox.css">
  <link rel="stylesheet" type="text/css" href="https://cdn.materialdesignicons.com/4.4.95/css/materialdesignicons.min.css">
  <link rel="stylesheet" type="text/css" href="/css/enq-map/jquery-jvectormap-2.0.3.css">
  <link rel="stylesheet" href="/vendor/hs-megamenu/src/hs.megamenu.css">
  <link rel="stylesheet" href="/vendor/hs-bg-video/hs-bg-video.css">
    <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-138901721-4"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-138901721-4');

        let controlsArr = [
            {
                selector: '.whitepaperButton',
                event_category: 'Whitepaper'
            },
            {
                selector: '.techpaperButton',
                event_category: 'Techpaper'
            },
            {
                selector: '.learnmoreButton',
                event_category: 'Learnmore'
            },
            {
                selector: '.androidminerButton',
                event_category: 'Androidminer'
            },
            {
                selector: '.webwalletButton',
                event_category: 'Webwallet'
            },
            {
                selector: '.googleplayWalletButton',
                event_category: 'Googleplaywallet'
            },
            {
                selector: '.ioswalletButton',
                event_category: 'Ioswallet'
            },
            {
                selector: '.startminingButton',
                event_category: 'Startmining'
            }
        ];

        document.addEventListener('mousedown', function (event) {
            if (event.button === 0 || event.button === 1) {
                for (let i=0; i < controlsArr.length; i++) {
                    if ((event.target.closest('a') !== null && event.target.closest('a').matches(controlsArr[i].selector)) || event.target.matches(controlsArr[i].selector)) {
                        gtag('event', 'click', {
                            'event_category': controlsArr[i].event_category,
                            'event_callback': function() {
                                if (i > 2 ) {
                                    let url = event.target.closest('a').href;
                                    window.location = url;
                                }
                            }
                        });
                    }
                }
            }
        });



  </script>
    <!-- Yandex.Metrika counter -->
    <script type="text/javascript" >
        (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
            m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
        (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

        ym(56652799, "init", {
            clickmap:true,
            trackLinks:true,
            accurateTrackBounce:true,
            webvisor:true,
            ecommerce:"dataLayer"
        });
    </script>
 </head>

<body>
<noscript><div><img src="https://mc.yandex.ru/watch/56652799" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->
  <header id="mainHeaderWithDropdown" class="u-header u-header--abs-top">
    {{> headerPromo}}
  </header>

<main id="content" role="main">

  <!-- Hero Section -->
  <div id="heroMain" class="gradient-overlay-half-primary-video-v1 height-100vh" style="min-height: 560px;">
    <!-- Video Background -->
    <div class="js-bg-video d-none d-md-block position-absolute w-100 height-100vh" style="min-height: 560px;"
         data-hs-bgv-path="/video/earth"
         data-hs-bgv-loop="1">
    </div>
    <!-- End Video Background -->
    <!-- Content -->
    <div class="container position-relative space-2 space-top-md-3 space-bottom-md-2 z-index-2 d-flex align-items-center h-100">
      <div class="pt-5 text-white">
          <h1 class="mb-5 text-uppercase" id="mainTitle">
              <span class="d-block">{{__ "PROMO_TITLE_P1"}}</span>
              <span class="d-block">{{__ "PROMO_TITLE_P2"}}</span>
          </h1>
          {{> lightROICalc}}
          <span class="arrow-down mdi mdi-chevron-down position-absolute go-down" data-content="enqAdvantages"></span>
      </div>
    <!-- End Content -->
    </div>
  </div>
  <div class="bg-light">
      {{> advantages}}
  </div>

  <div class="container pb-11">
    {{> tokenValueCreatedByMinersPromo}}
    {{> marketStatsTopSection}}

    <div class="text-center m-auto mb-9">
      <h2 class="h2 font-weight-semi-bold mb-8">{{__ 'EXCHANGES'}}</h2>
    </div>
    {{> exchangesTablePromo}}
  </div>

  <div class="bg-light">
    {{> joinEnecuumNetworkPromo}}
  </div>
  <div class="container my-10">
      <h2 class="mt-4 mb-8 text-center">{{__ "HOW_TO_MINE"}}</h2>
      {{> miningSteps}}
  </div>
  <div class="bg-light">
    <div class="container">
      {{> networkStatsTopSection}}
    </div>

    {{> nodesMap}}

    <div class="container pb-8 text-center">
      <h3 class="mb-3">{{__ 'VIEW_BLOCKS_LIVE'}}</h3>
      <a role="button" class="btn btn-primary transition-3d-hover" href="https://neuro.enecuum.com/" target="_blank">{{__ 'EXPLORE_RIGHT'}}</a>
    </div>
  </div>

  {{> howToStart}}

</main>

<!-- ========== FOOTER ========== -->
{{> footerPromo}}
<!-- ========== END FOOTER ========== -->

  <!-- JS Global Compulsory -->
  <script src="/vendor/jquery/dist/jquery.min.js"></script>
  <script src="/vendor/jquery-migrate/dist/jquery-migrate.min.js"></script>
  <script src="/vendor/popper.js/dist/umd/popper.min.js"></script>
  <script src="/vendor/bootstrap/bootstrap.min.js"></script>


  <!-- JS Front -->
  <script src="/js/hs.core.js"></script>
  <script src="/vendor/dzsparallaxer/dzsparallaxer.js"></script>
  <script src="/js/components/hs.slick-carousel.js"></script>
  <script src="/js/components/hs.header.js"></script>
  <script src="/js/components/hs.unfold.js"></script>
  <script src="/js/components/hs.bg-video.js"></script>
 <script src="/js/components/hs.sticky-block.js"></script>


  <!-- JS Implementing Plugins -->
<script src="/vendor/fancybox/jquery.fancybox.min.js"></script>
<script src="/vendor/slick-carousel/slick/slick.js"></script>
<script src="/js/components/hs.fancybox.js"></script>
<script src="/js/enq-map/jquery-jvectormap-2.0.3.min.js"></script>
<script src="/js/enq-map/jquery-jvectormap-world-mill.js"></script>
<script src="/vendor/hs-megamenu/src/hs.megamenu.js"></script>
<script src="/vendor/hs-bg-video/hs-bg-video.js"></script>
<script src="/vendor/hs-bg-video/vendor/player.min.js"></script>
<script src="/js/components/hs.scroll-nav.js"></script>

<!-- JS Plugins Init. -->
<script>
  $(window).on('load', function () {
    // initialization of HSMegaMenu component
    $('.js-mega-menu').HSMegaMenu({
      event: 'hover',
      pageContainer: $('.container'),
      breakpoint: 0,
      hideTimeOut: 0
    });
  });

  $(document).ready(function () {
    // // initialization of header
    $.HSCore.components.HSHeader.init($('#headerWithDropdown'));
    // initialization of popups
    $.HSCore.components.HSFancyBox.init('.js-fancybox');
    // initialization of video on background
    $.HSCore.components.HSBgVideo.init('.js-bg-video');
    // initialization of slick carousel
    $.HSCore.components.HSSlickCarousel.init('#partnersCarousel');
    $('#partnersCarousel').show();
    // initialization of unfold component
    $.HSCore.components.HSUnfold.init($('[data-unfold-target]'));
      // initialization of sticky blocks
      $.HSCore.components.HSStickyBlock.init('.js-sticky-block-faq');
      // initialization of HSScrollNav component
      $.HSCore.components.HSScrollNav.init($('.js-scroll-nav'), {
          duration: 700
      });

      $('body').on('click', '.arrow-down, .jump-to-section', function(e) {
          e.preventDefault();
          let that = this;
          let targetID = $(that).attr('data-content');
          $('#'+targetID).show();

          $('html, body').animate({
              scrollTop: $('#'+targetID).offset().top
          }, 2000, function() {
              if (targetID === 'forProfessionals') {
                  $('#'+targetID).show();
                  $(that).hide();
              }
          });
      });
    
    //Cookies alert workflow start
    ENQCookies = {
      cookieName: 'enecuum-corp-site',
      cookiesExpirationYears: 10,
      cookieWidgetSelector: '#cookiesAlert',
      cookiesIAgreeControlSelector: '#cookiesAlertIAgree',
      getCookie: function() {
        var name = this.cookieName + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var cookiesArray = decodedCookie.split(';');
        for(var i = 0; i < cookiesArray.length; i++) {
            var cookie = cookiesArray[i];
            while (cookie.charAt(0) == ' ') {
                cookie = cookie.substring(1);
            }
            if (cookie.indexOf(name) == 0) {
                return cookie.substring(name.length, cookie.length);
            }
        }
        return "";
      },
      cookieExist: function() {
        return this.getCookie(this.cookieName) === 'true';
      },
      setCookies: function() {
        let that = this;
        let currentDate = new Date();
        let expirationDate = new Date(currentDate.setFullYear(currentDate.getFullYear() + that.cookiesExpirationYears)).toUTCString();
        document.cookie = this.cookieName+"=true; expires=" + expirationDate;
        $(that.cookieWidgetSelector).remove();
      },
      normalFlowExecute: function() {
        let that = this;
        if (that.cookieExist() === false) {
          $(that.cookieWidgetSelector).show();
          $(that.cookiesIAgreeControlSelector).on('click', function() {
            that.setCookies();
          });
        } else {
          $(that.cookieWidgetSelector).remove();
        }
      }
    }

    ENQCookies.normalFlowExecute();
    //Cookies alert workflow end
        $.ajax({
      method: 'GET',
      url: "https://api.coingecko.com/api/v3/coins/enq-enecuum?tickers=true&market_data=true&community_data=false&developer_data=false&sparkline=false",
      async: true,
    }).success(function(response) {
      let formatter = new Intl.NumberFormat("en-us", {
        useGrouping: 'true',
        maximumFractionDigits: '0'
      });

      let usdFormatter = new Intl.NumberFormat("en-us", {
        useGrouping: 'true',
        maximumFractionDigits: '5'
      });

      let marketStatsTitles = {
        market_cap: response.market_data.market_cap.usd,
        coin_volume: response.market_data.total_volume.usd,
        price_usd: response.market_data.current_price.usd,
        price_btc: response.market_data.current_price.btc
      }

      let tickersArray = response.tickers;
      let exchange_volume = 0;

      exchangeNamesArray = ['kucoin','crex24'];
      let kucoinVolume = 0;
      let crex24Volume = 0;
      let graviexVolume = 0;


      $.each(tickersArray, function(index, ticker) {
        switch (ticker.market.identifier) {
          case 'kucoin':
            kucoinVolume += ticker.converted_volume.usd;
            break;
          case 'crex24':
            crex24Volume += ticker.converted_volume.usd;
            break;
        }
      });

      $("[data-content='market_cap']").text('$'+usdFormatter.format(marketStatsTitles.market_cap));
      $("[data-content='coin_volume']").text('$'+usdFormatter.format(marketStatsTitles.coin_volume));     
      $("[data-content='price_usd']").text(marketStatsTitles.price_usd);
      $("[data-content='price_btc']").text(marketStatsTitles.price_btc);

      $("[data-content='kucoin-volume']").text('$'+usdFormatter.format(kucoinVolume));
      $("[data-content='crex24-volume']").text('$'+usdFormatter.format(crex24Volume));

    });
    $.ajax({
      method: 'GET',
      url: "https://neuro.enecuum.com/api/v1/stats",
      async: true,
    })
    .success(function(networkStats) {
      let networkStatsTitles = ['poa_count','pow_count','pos_count','accounts','tps','max_tps','reward_poa','reward_pow','csup','total_daily_stake'];
      let networkStatsNodes = ['poa_count','pow_count','pos_count'];
      let networkStatCoin = ['reward_poa', 'reward_pow','csup','total_daily_stake']
      let nodesCount = 0;
      let statValue = '---';
      let statValueUSD= '---';
      let formatter = new Intl.NumberFormat("en-us", {
        useGrouping: 'true',
        maximumFractionDigits: '0'
      });
      let usdFormatter = new Intl.NumberFormat("en-us", {
        useGrouping: 'true',
        maximumFractionDigits: '5'
      });

      $.each(networkStatsTitles, function(key,networkStatsItem) {
        if (jQuery.type(networkStats[networkStatsItem]) === "number") {
          // if ($.inArray(networkStatsItem,networkStatCoin) !== -1) {
          //   networkStats[networkStatsItem] /= 1e10;
          //   statValue = formatter.format(networkStats[networkStatsItem]);            
          //   statValueUSD = usdFormatter.format(networkStats[networkStatsItem] * networkStats.cg_usd);
          //   $("[data-content='"+networkStatsItem+"']").text(statValue);
          //   $("[data-content='"+networkStatsItem+"_usd']").text(statValueUSD);
          // } else 
            $("[data-content='"+networkStatsItem+"']").text(networkStats[networkStatsItem]);            
          
          if ($.inArray(networkStatsItem,networkStatsNodes) !== -1) {
            nodesCount += networkStats[networkStatsItem];
          }
        } else {
          $("[data-content='"+networkStatsItem+"']").text('---');
        }        
      });

      $("[data-content='totalNodes']").text(nodesCount >0 ? nodesCount : '---');
    });  



    // initialization of slick carousel
    $.ajax({
      method: 'GET',
      url: "https://neuro.enecuum.com/api/v1/height",
      async: true,
    }).success(function(response) {
       $("[data-content='lastBlockValue']").text(response.height);
    });


    $.ajax({
      method: 'GET',
      url: "https://neuro.enecuum.com/api/v1/peer_map",
      async: true,
    })
    .error(function() {
      $('#nodesMapWrapper').remove();
    })
    .success(function(response) {
      let marker_style = [{r: 3, fill:'blue'}, {r: 3, fill:'blue'}, {r: 3, fill:'red'}];
      let markers = response.filter((el)=> (el.lat !== null && el.lon !== null))
            .map((el) => {return {latLng:[el.lat, el.lon], name:el.count.toString(), style: marker_style[el.type] }});
      $(function(){
        var mapScaleFactor = 1;
        function calculateMarkerSize(markerInitialRadius, scaleFactor) {
            var markerSize = markerInitialRadius * Math.pow(scaleFactor, 0.2);
            return markerSize;
        }
        $("#nodesMap").vectorMap({
            map:"world_mill", normalizeFunction:"polynomial", hoverOpacity:.7, hoverColor:!1, regionStyle: {
                initial: {
                    fill: "#e3eaef",
                    stroke: "#e3eaef",
                    "stroke-width": 1, 
                }
            },
            zoomMax: 20,
            onViewportChange: function(event, scaleFactor){
                mapScaleFactor = scaleFactor;
                $('.jvectormap-marker').each(function () {
                    var markerIndex = $(this).attr('data-index');
                    var markerInitialRadius = markers[markerIndex].style.r;
                    var radius = calculateMarkerSize(markerInitialRadius, scaleFactor);
                    this.setAttribute('r', radius);
            })},
            markerStyle: {
                initial: {
                    r: 2, fill: "#727cf5", "fill-opacity": .9, stroke: "#fff", "stroke-width": 7, "stroke-opacity": .4
                },
                hover: {
                    "fill-opacity": 1, stroke: "#fff", "stroke-width": 1.5
                }
            },
            onMarkerOver: function (event, StringCode) {
                event.preventDefault();
                var marker = $('.jvectormap-marker[data-index = ' + StringCode + ']');
                var markerInitialRadius = markers[StringCode].style.r;
                var extendedmarkerSize = calculateMarkerSize(markerInitialRadius, mapScaleFactor)*1.3;
                marker.attr('r', extendedmarkerSize);
            },
            onMarkerOut: function(event, StringCode){
                var marker = $('.jvectormap-marker[data-index = ' + StringCode + ']');
                var markerInitialRadius = markers[StringCode].style.r;
                marker.attr('r', calculateMarkerSize(markerInitialRadius, mapScaleFactor));
            }
            , backgroundColor:"transparent"
            , markers: markers
        });
      });
    });

    let validator = {
      checkValidDigitalValue: function(value) {
        return (value !== null && value !== undefined && !isNaN(value)) ? true : false;
      }
    }

    let currencyExchange = {
      convertValue: function(value, rate) {
        return (validator.checkValidDigitalValue(value) && validator.checkValidDigitalValue(rate)) ? value * rate : '---';
      }
    }

    let commas = function(num){
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    };

    let scope = {

    };

    // scope.refCheck = $('#refCheck').prop('checked');

    scope.convertValueToUSD = function(value) {
          return currencyExchange.convertValue(value, scope.stats.cg_usd);
      }

    scope.convert = function(enq){
        enq = enq / 1e10;
        // Add more in future
        return [
            {
                name:'ENQ',
                value: commas(enq.toFixed(2)) + ' ENQ'
            },
            {
                name:'USD',
                value: commas((enq * parseFloat(scope.stats.cg_usd)).toFixed(3)) + ' USD'
            },
            {
                name:'ETH',
                value: (enq * parseFloat(scope.stats.cg_eth)).toFixed(6) + ' ETH'
            },
            {
                name:'BTC',
                value: (enq * parseFloat(scope.stats.cg_btc)).toFixed(8) + ' BTC'
            }
        ]
    };

    scope.lerp = function(y0, y1, x0, x1, y){
        return (x0 + ((y - y0) / (y1 - y0)) * (x1 - x0))
    };

    // scope.getTimestamp = function(unix){
    //     return (new Date(unix * 1000)).toLocaleString()
    // };

    scope.calcROI = function(stake){
        let rois = scope.rois;
        for (let i = 0; i < rois.length; i++) {
            if(stake === rois[i].stake){
                return rois[i].roi;
            }
            else if(stake < rois[i].stake){
                return this.lerp(rois[i-1].stake, rois[i].stake, rois[i-1].roi, rois[i].roi, stake)
            }
        }
        return 0;
    };

      scope.reloadROI = function(stake) {
        if(!scope.rois.length )   //|| !scope.stats.$resolved!!!!!!!!
            return false;
        scope.isLoaded = true;

        stake = parseFloat(stake);
        if(isNaN(stake)){
            return false;
        }
        if(stake < 25 || stake > 25000){
            $.toast({
                heading: 'Error',
                text: 'Stake is out of range 25...25,000',
                icon: 'error',
                hideAfter: 5000,
                stack: 3,
                position: 'top-right',
                loader: false
            });
            return false;
        }

        scope.translationData.stake = stake;
        stake = stake * 1e10;
        let roi = scope.calcROI(stake);
        let ratio = ((roi - stake) / stake);
        if($('#refCheck').prop('checked'))
            ratio += ratio * 0.1;
        scope.roiData = [
            {
                period: "Daily",
                values: scope.convert((stake * ratio)),
                roi: "+ " + (ratio * 100).toFixed(2) + " %"
            },
            {
                period: "Weekly",
                values: scope.convert(stake * ratio * 7),
                roi: "+ " + (ratio * 7 * 100).toFixed(2) + " %"
            },
            {
                period: "Monthly",
                values: scope.convert(stake * ratio * 30),
                roi: "+ " + (ratio * 30 * 100).toFixed(2) + " %"
            },
            {
                period: "Annual",
                values: scope.convert(stake * ratio * 365),
                roi: "+ " + (ratio * 365 * 100).toFixed(2) + " %"
            }
        ];
    };

    let incorrectValue = '---';
    scope.roiValid = true;
    scope.stake = 25;
    scope.isLoaded = false;
    scope.translationData = {
        stake: 25,
        min: 25,
        max: 25000
    };
    scope.roiData = [];

    let usdFormatter = new Intl.NumberFormat("en-us", {
      useGrouping: 'true',
      maximumFractionDigits: '5'
    });

    function refreshRoiCalc(stake) {
      $.ajax({
        method: 'GET',
        url: "https://neuro.enecuum.com/api/v1/roi",
        async: true,
      }).success(function(roi) {
          scope.rois = roi;
          $.ajax({
              method: 'GET',
              url: "https://neuro.enecuum.com/api/v1/stats",
              async: true,
          }).success(function(stats) {
              scope.stats = stats;
              let statsPropertiesArr = ['total_daily_stake','reward_poa','poa_count','cg_usd','cg_btc'];
              statsPropertiesArr.forEach(function(item) {
                  scope.stats[item] = (stats.hasOwnProperty(item) && validator.checkValidDigitalValue(stats[item])) ? stats[item] : incorrectValue;
              });
              scope.reloadROI(stake);
              populateRoiElements();
              $('#roiStakeUSD').text(usdFormatter.format(scope.convertValueToUSD(stake)) + ' USD');
          }).error(function() {
              $('#ROICalcContainer').remove();
          });
      }).error(function() {
          $('#ROICalcContainer').remove();
      });


    }

    refreshRoiCalc(scope.translationData.stake);


    function populateRoiElements() {
      scope.reloadROI(scope.translationData.stake);
      $('#roiCalcCards').empty();
      let periodsArr = ['В день', 'В неделю', 'В месяц', 'В год'];      
      $.each(scope.roiData, function(index, roiDataItem) {
        let period = ($('#roiCalcCards').attr('data-content') === 'lang-ru') ? periodsArr[index] : roiDataItem.period;
        $('#roiCalcCards').append('<div class="col-md-6 col-xl-3 mb-5"><div class="card bg-light border-0"><div class="card-body"><div class="h4 h-bold mb-3">'+period+'</div><div class="table-responsive-sm"><table class="table table-borderless table-sm table-centered mb-0"><tbody id="enq_'+roiDataItem.period+'"></tbody></table><hr><span class="text-grey h4 mr-3">ROI</span><span class="h-bold h3 text-blue">'+roiDataItem.roi+'</span></div></div></div></div>');
        $.each(roiDataItem.values, function(index, currency) {
          $('#enq_'+roiDataItem.period).append('<tr ng-repeat="curr in rec.values"><td><div class="font-weight-bold">'+currency.name+'</div></td><td>'+currency.value+'</td></tr>');
        });
      });
      $('#roiCalcCards td:nth-child(2), #roiCalcCards h3, #roiStakeUSD').css({'opacity': 1});
      $('#roiStakeErrorMessage').css({'opacity': '0'});
    }

    $('#roiStake').on('change keyup', function() {
      let inputStake = $(this).val();
      if (inputStake >= 25 && inputStake <= 25000) {
        refreshRoiCalc(inputStake);
      } else {
        $('#roiCalcCards td:nth-child(2), #roiCalcCards h3, #roiStakeUSD').css({'opacity': 0.1});
        $('#roiStakeErrorMessage').css({'opacity': '1'});
      }
    });

    $('#refCheck').on('change', function() {
      let inputStake = $('#roiStake').val();
      refreshRoiCalc(inputStake);
    });

    // let commas = function(num){
    //   return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    // };

    // let scope = {

    // };

    // scope.convert = function(enq){
    //   enq = enq / 1e10;
    //   return commas(enq.toFixed(2)) + ' ENQ'
    // };

    // scope.lerp = function(y0, y1, x0, x1, y){
    //   return (x0 + ((y - y0) / (y1 - y0)) * (x1 - x0))
    // };

    // scope.calcROI = function(stake){
    //   let rois = scope.rois;
    //   for (let i = 0; i < rois.length; i++) {
    //     if(stake === rois[i].stake){
    //       return rois[i].roi;
    //     }
    //     else if(stake < rois[i].stake){
    //       return this.lerp(rois[i-1].stake, rois[i].stake, rois[i-1].roi, rois[i].roi, stake)
    //     }
    //   }
    //   return 0;
    // };

    // scope.reloadROI = function(stake) {
    //   if(!scope.rois.length )   //|| !scope.stats.$resolved!!!!!!!!
    //     return false;

    //   stake = parseFloat(stake);
    //   if(isNaN(stake)){
    //     return false;
    //   }

    //   scope.translationData.stake = stake;
    //   stake = stake * 1e10;
    //   let roi = scope.calcROI(stake);
    //   let ratio = ((roi - stake) / stake);
    //   if($('#refCheck').prop('checked'))
    //     ratio += ratio * 0.1;
    //   scope.roiData = scope.convert(stake * ratio * 365);
    // };

    // scope.translationData = {
    //   stake: 25,
    //   min: 25,
    //   max: 25000
    // };
    // scope.roiData = null;

    // function refreshRoiCalc(stake) {
    //   $.ajax({
    //     method: 'GET',
    //     url: "https://neuro.enecuum.com/api/v1/roi",
    //     async: true,
    //   }).success(function(roi) {
    //       scope.rois = roi;
    //       scope.reloadROI(stake);
    //       $('#roiRecalc').val(scope.roiData.replace(/ ENQ/, ''));
    //   }).error(function() {
    //     $('#ROICalcContainer').remove();
    //   });
    // }

    // refreshRoiCalc(scope.translationData.stake);

    // $('#roiStake').on('change keyup', function() {      
    //   let inputStake = parseFloat($(this).val());
    //   if (isNaN(inputStake)) {
    //     inputStake = 25;
    //   }
    //   $(this).val(inputStake);
    //   if (inputStake < 25 || inputStake > 25000) {
    //       inputStake = inputStake < 25 ? 25 : 25000;
    //       $('#roiStake').val(inputStake);
    //   }
    //   refreshRoiCalc(inputStake);
    // });

    // $('#refCheck').on('change', function() {
    //   let inputStake = $('#roiStake').val();
    //   refreshRoiCalc(inputStake);
    // });

  });

</script>
</body>
</html>
